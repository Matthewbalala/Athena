// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import privdata "github.com/hyperledger/fabric/core/common/privdata"

// CollectionAccessPolicy is an autogenerated mock type for the CollectionAccessPolicy type
type CollectionAccessPolicy struct {
	mock.Mock
}

// AccessFilter provides a mock function with given fields:
func (_m *CollectionAccessPolicy) AccessFilter() privdata.Filter {
	ret := _m.Called()

	var r0 privdata.Filter
	if rf, ok := ret.Get(0).(func() privdata.Filter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(privdata.Filter)
		}
	}

	return r0
}

// IsMemberOnlyRead provides a mock function with given fields:
func (_m *CollectionAccessPolicy) IsMemberOnlyRead() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsMemberOnlyWrite provides a mock function with given fields:
func (_m *CollectionAccessPolicy) IsMemberOnlyWrite() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MaximumPeerCount provides a mock function with given fields:
func (_m *CollectionAccessPolicy) MaximumPeerCount() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MemberOrgs provides a mock function with given fields:
func (_m *CollectionAccessPolicy) MemberOrgs() map[string]struct{} {
	ret := _m.Called()

	var r0 map[string]struct{}
	if rf, ok := ret.Get(0).(func() map[string]struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]struct{})
		}
	}

	return r0
}

// RequiredPeerCount provides a mock function with given fields:
func (_m *CollectionAccessPolicy) RequiredPeerCount() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
)

type HaltCallbacker struct {
	HaltCallbackStub        func()
	haltCallbackMutex       sync.RWMutex
	haltCallbackArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *HaltCallbacker) HaltCallback() {
	fake.haltCallbackMutex.Lock()
	fake.haltCallbackArgsForCall = append(fake.haltCallbackArgsForCall, struct {
	}{})
	fake.recordInvocation("HaltCallback", []interface{}{})
	fake.haltCallbackMutex.Unlock()
	if fake.HaltCallbackStub != nil {
		fake.HaltCallbackStub()
	}
}

func (fake *HaltCallbacker) HaltCallbackCallCount() int {
	fake.haltCallbackMutex.RLock()
	defer fake.haltCallbackMutex.RUnlock()
	return len(fake.haltCallbackArgsForCall)
}

func (fake *HaltCallbacker) HaltCallbackCalls(stub func()) {
	fake.haltCallbackMutex.Lock()
	defer fake.haltCallbackMutex.Unlock()
	fake.HaltCallbackStub = stub
}

func (fake *HaltCallbacker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.haltCallbackMutex.RLock()
	defer fake.haltCallbackMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *HaltCallbacker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
